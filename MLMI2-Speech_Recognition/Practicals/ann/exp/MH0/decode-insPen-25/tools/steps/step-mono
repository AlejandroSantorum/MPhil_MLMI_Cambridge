#!/bin/tcsh
#$ -S /bin/tcsh

#set verbose
# last update: 31/10/2015

############################################################
# Step1: monophone GMM-HMMs training
############################################################

set ALLARGS=($*)
set CHANGED
set NMIX = 1
if ( $#argv > 1 ) then
while ( $?CHANGED )
    unset CHANGED
    if ( "$argv[1]" == "-NUMMIXES" )  then
        set CHANGED
        shift argv
        set NMIX = $argv[1]
        shift argv
    endif
    if ( "$argv[1]" == "-TOOLSDIR" )  then
        set CHANGED
        shift argv
        set TOOLSDIR = $argv[1]
        shift argv
    endif
    if ( "$argv[1]" == "-FLATSTART" ) then
        set CHANGED
        shift argv
        set FLATSTART
    endif
end
endif

# Check Number of Args 
if ( $#argv != 2) then
    echo "Usage: $0 [-NUMMIXES n] [-TOOLSDIR path] [-FLATSTART] environment systemdir"
    echo " e.g.: $0 environment.fbk25d_Z SF0"
    echo " -NUMMIXES n: final GMM-HMMs have n Gaussian components/state"
    echo " -TOOLSDIR path: use specified dir rather than default TIMITTOOLS"
    echo " -FLATSTART: use flat-start initialsation for all monophone GMM-HMMs"
    exit 1
endif

set SYSENV = $argv[1]
set TGTDIR = $argv[2]

if (! -f $SYSENV) then
    echo "The environment file $SYSENV is missing"
    exit 1
endif
source $SYSENV
if (-f /opt/intel/composerxe/bin/compilervars.csh) then
    source /opt/intel/composerxe/bin/compilervars.csh intel64
endif
    
if ( -d $TGTDIR) then
    echo "Target directory $TGTDIR exists - delete before rerun"
    exit 1
endif
mkdir -p $TGTDIR

if (! -d CMDs/$TGTDIR) mkdir -p CMDs/$TGTDIR
set MEMO = records
echo "------------------------------------" >> CMDs/$TGTDIR/${MEMO}.cmds
echo "$0 $ALLARGS" >> CMDs/${TGTDIR}/${MEMO}.cmds
echo "------------------------------------" >> CMDs/$TGTDIR/${MEMO}.cmds


# change to the target working dir and do the basic steups
cp $SYSENV $TGTDIR/environment
cd $TGTDIR
#     setup the tools dir
if ($?TOOLSDIR) then
    ln -s $TOOLSDIR ./tools
else
    ln -s $TIMITTOOLS ./tools
endif
if ( -d tools/htklib/cuda) then
    setenv LD_LIBRARY_PATH tools/htklib:$LD_LIBRARY_PATH
endif
#     setup the lib and cfgs
ln -s ${TIMITLIB} ./
cp lib/cfgs/basic${FEADIFF}.cfg ./basic.cfg
cp lib/mlists/mono+sil.mlist ./hmms.mlist

set hmmidx = 0

# 1.1 setup the initial monophone HMMs
# initialse in different ways
if ($?FLATSTART) then
    echo "Step 1: Generate the flat-start monophone GMM-HMMs by HCompV in hmm0"
    mkdir -p hmm0/proto/init
    cp lib/proto/proto${FEADIFF} ./hmm0/proto/init/proto
    mkdir -p hmm0/mono
    # use HCompV to estimate the variance floor and proto for flat start in hmm0
    tools/htkbin/HCompV -A -D -V -T 1 -C basic.cfg -f 0.01 -m -M hmm0/proto -S lib/flists/train.scp hmm0/proto/init/proto > hmm0/proto/LOG
    # create each monophone HMM as a clone of proto
    foreach hmm (`cat hmms.mlist`)
        sed "s/proto/$hmm/g" hmm0/proto/proto > hmm0/mono/$hmm
    end
    # put all GMM-HMMs together
    tools/htkbin/HHEd -A -D -V -T 1 -d hmm0/mono -w hmm0/MMF lib/edfiles/tie_alltrans.hed hmms.mlist > hmm0/LOG
    # generate hmm10
    ln -s $PWD/hmm0 ./hmm10
else
    echo "Step 1: Init monophone GMM-HMMs by HInit in hmm0 and HRest in hmm1"
    mkdir -p hmm0/mono/init
    cp lib/proto/proto${FEADIFF} ./hmm0/mono/init/proto
    # estimate the variance floor using HCompV (hmm0/mono/proto is useless here)
    mkdir -p hmm0/proto
    tools/htkbin/HCompV -A -D -V -T 1 -C basic.cfg -f 0.01 -m -M hmm0/proto -S lib/flists/train.scp hmm0/mono/init/proto > hmm0/proto/LOG
    # estimate each initial monophone HMM by HInit
    foreach hmm (`cat hmms.mlist`)   
        tools/htkbin/HInit -A -D -V -T 1 -C basic.cfg -l $hmm -M hmm0/mono -o $hmm -I lib/mlabs/train.mlf -S lib/flists/train.scp hmm0/mono/init/proto > hmm0/mono/LOG.${hmm}
    end
    # put all GMM-HMMs together
    tools/htkbin/HHEd -A -D -V -T 1 -d hmm0/mono -w hmm0/MMF lib/edfiles/tie_alltrans.hed hmms.mlist > hmm0/LOG 
    # update the individual models using HRest
    mkdir -p hmm1/mono
    # re-estimate for each single monophone HMM
    foreach hmm (`cat hmms.mlist`) 
        tools/htkbin/HRest -A -D -V -T 1 -C basic.cfg -l $hmm -M hmm1/mono -I lib/mlabs/train.mlf -S lib/flists/train.scp hmm0/mono/${hmm} > hmm1/mono/LOG.${hmm} 
    end
    # put all GMM-HMMs together
    tools/htkbin/HHEd -A -D -V -T 1 -d hmm1/mono -w hmm1/MMF lib/edfiles/tie_alltrans.hed hmms.mlist > hmm1/LOG
    # generate hmm10
    ln -s $PWD/hmm1 ./hmm10
endif


# 1.2 re-estimate the HMMs in hmm10/MMF for 4 epochs 
echo "Step 2: Re-estimate the initial GMM-HMMs hmm10/MMF by 4 epochs"
#     generate the stats file by single pass training with HERest in hmm1
cp lib/cfgs/herest${FEADIFF}.cfg ./herest.cfg
cp lib/htefiles/HTE.mono ./HTE.herest
echo "set TRAINDATALIST = lib/flists/train.scp" >> HTE.herest	# training data file list
echo "set TRAINMLF = lib/mlabs/train.mlf" >> HTE.herest		# training labels
echo "set HMMLIST = hmms.mlist" >> HTE.herest			# HMM list in hmm0/MMF
echo "set HECONFIG = herest.cfg" >> HTE.herest			# HERest config
echo "set BASICCONFIG = basic.cfg" >> HTE.herest			# basic feature config 
echo "set HEBIN = tools/htkbin/HERest" >> HTE.herest		# HERest binary file
#tools/scripts/herest HTE.herest hmm0 hmm1	
#     re-estimate single mixture GMM-HMMs using HERest by 4 epohcs
tools/scripts/hbuild HTE.herest 11 14


# 1.3 (optionally) increase the component number in each Gaussian mixture
set stepidx = 2
set lasthmm = hmm14
set nmix = 2
while (1)
    # break the loop if it is a single Gaussian system
    if ($NMIX == 1) then
        break
    endif
    # current stage
    @ stepidx += 1
    echo "Step "${stepidx}": Increase the components of "${lasthmm}"/MMF and re-estimate the model in hmm"${nmix}"1 ... hmm"${nmix}"4"
    # increase the mixture number by no more than 2 with HHEd
    mkdir hmm${nmix}0
    echo "set HMMLIST = hmms.mlist" > hmm${nmix}0/HTE.hhed
    echo "set HHBIN = tools/htkbin/HHEd" >> hmm${nmix}0/HTE.hhed
    echo "LS ${lasthmm}/stats" > hmm${nmix}0/inc_mixtures.hed
    echo "MU $nmix {*.state[2-4].mix}" >> hmm${nmix}0/inc_mixtures.hed
    tools/scripts/hedit hmm${nmix}0/HTE.hhed ${lasthmm} hmm${nmix}0 hmm${nmix}0/inc_mixtures.hed
    # re-estimate the model by 4 epochs
    tools/scripts/hbuild HTE.herest ${nmix}1 ${nmix}4
    set lasthmm = hmm${nmix}4
    # break the loop 
    if ($nmix == $NMIX) then
        break
    else
        # update the loop control variable
        @ nmix = $nmix + 2
        # incase $NMIX is odd
        if ($nmix > $NMIX) then
            set nmix = $NMIX
        endif
    endif
end

# output the results
echo "Training complete: The final monophone GMM-HMM set is in "${lasthmm}


