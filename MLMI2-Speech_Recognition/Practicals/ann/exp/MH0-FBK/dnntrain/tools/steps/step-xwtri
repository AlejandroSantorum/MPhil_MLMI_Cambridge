#!/bin/tcsh
#$ -S /bin/tcsh

#set verbose
# last update: 31/10/2015

############################################################
# Step1: tied cross-word triphone state GMM-HMMs training
############################################################

set ALLARGS=($*)
set CHANGED
set NMIX = 1
set ROVAL = 200.0
set TBVAL = 200.0
if ( $#argv > 1 ) then
while ( $?CHANGED )
    unset CHANGED
    if ( "$argv[1]" == "-NUMMIXES" )  then
        set CHANGED
        shift argv
        set NMIX = $argv[1]
        shift argv
    endif
    if ( "$argv[1]" == "-ROVAL" )  then
        set CHANGED
        shift argv
        set ROVAL = $argv[1]
        shift argv
    endif
    if ( "$argv[1]" == "-TBVAL" )  then
        set CHANGED
        shift argv
        set TBVAL = $argv[1]
        shift argv
    endif
    if ( "$argv[1]" == "-TOOLSDIR" )  then
        set CHANGED
        shift argv
        set TOOLSDIR = $argv[1]
        shift argv
    endif
end
endif

# Check Number of Args 
if ( $#argv != 3) then
    echo "Usage: $0 [-NUMMIXES n] [-ROVAL 800.0] [-TBVAL 1000.0] [-TOOLSDIR path] abspath_srcdir hmmdir systemdir"
    echo " e.g.: $0 /home/timit/SF0/ml hmm7 SF1/ml"
    echo " -NUMMIXES n: final GMM-HMMs have n Gaussian components/state"
    echo " -ROVAL value: set the RO value of decision tree clustering"
    echo " -TBVAL value: set the TB value of decision tree clustering"
    echo " -TOOLSDIR path: use specified dir rather than default TIMITTOOLS"
    exit 1
endif

set SRCDIR = $argv[1]
set HMMDIR = $argv[2]
set TGTDIR = $argv[3]

if (! -f $SRCDIR/environment) then
    echo "The environment file $SRCDIR/environment is missing"
    exit 1
endif
source $SRCDIR/environment
if (-f /opt/intel/composerxe/bin/compilervars.csh) then
    source /opt/intel/composerxe/bin/compilervars.csh intel64
endif

if (! -f $SRCDIR/$HMMDIR/MMF) then
    echo "Source HMMs $SRCDIR/$HMMDIR/MMF do not exist"
    exit 1
endif
if (! -f $SRCDIR/hmms.mlist) then
    echo "Source HMM list $SRCDIR/hmms.mlist does not exist"
    exit 1
endif

if ( -d $TGTDIR) then
    echo "Target directory $TGTDIR exists - delete before rerun"
    exit 1
endif
mkdir -p $TGTDIR

if (! -d CMDs/$TGTDIR) mkdir -p CMDs/$TGTDIR
set MEMO = records
echo "------------------------------------" >> CMDs/$TGTDIR/${MEMO}.cmds
echo "$0 $ALLARGS" >> CMDs/${TGTDIR}/${MEMO}.cmds
echo "------------------------------------" >> CMDs/$TGTDIR/${MEMO}.cmds


# change to the target working dir and do the basic steups
cp $SRCDIR/environment $TGTDIR/environment
cd $TGTDIR
#     setup the tools dir
if ($?TOOLSDIR) then
    ln -s $TOOLSDIR ./tools
else
    ln -s $TIMITTOOLS ./tools
endif
if ( -d tools/htklib/cuda) then
    setenv LD_LIBRARY_PATH tools/htklib:$LD_LIBRARY_PATH
endif
#     setup the lib and cfgs
ln -s ${TIMITLIB} ./
cp lib/cfgs/basic${FEADIFF}.cfg ./basic.cfg
#     link the HMMs and HMM list
mkdir -p hmm0/work
ln -s $SRCDIR/$HMMDIR/MMF hmm0/work/MMF
ln -s $SRCDIR/hmms.mlist hmm0/work/hmms.mlist


# 1.1 setup the initial untied triphone HMMs (in hmm0) as a clone of monophone GMM-HMMs
echo "Step 1: Generate initial untied triphone GMM-HMMs in hmm0/MMF and produce stats in hmm1/MMF"
#     generate the cross-word triphone labels
tools/htkbin/HLEd -A -D -V -T 1 -n hmm0/hmms.mlist -i train.mlf lib/edfiles/make_xwtri.led lib/mlabs/train.mlf > hmm0/LOG.hled
echo 'CL hmm0/hmms.mlist' > hmm0/clone_xwtri.hed
#     generate the untied triphone HMMs
tools/htkbin/HHEd -A -D -V -T 1 -H hmm0/work/MMF -M hmm0 hmm0/clone_xwtri.hed hmm0/work/hmms.mlist > hmm0/LOG.hhed
#     do single pass re-estimation
cp lib/cfgs/herest${FEADIFF}.cfg ./herest.cfg
cp lib/htefiles/HTE.xwtri hmm0/HTE.herest
echo "set TRAINDATALIST = lib/flists/train.scp" >> hmm0/HTE.herest	# training data file list
echo "set TRAINMLF = train.mlf" >> hmm0/HTE.herest			# training labels
echo "set HMMLIST = hmm0/hmms.mlist" >> hmm0/HTE.herest                 # HMM list in hmm0/MMF
echo "set HECONFIG = herest.cfg" >> hmm0/HTE.herest			# HERest config
echo "set BASICCONFIG = basic.cfg" >> hmm0/HTE.herest                   # basic feature config 
echo "set HEBIN = tools/htkbin/HERest" >> hmm0/HTE.herest            	# HERest binary file
#tools/scripts/herest hmm0/HTE.herest hmm0 hmm1
tools/scripts/hbuild hmm0/HTE.herest 1 2


# 1.2 do decision tree clustering to produce the tied triphone GMM-HMMs and do re-estimation
echo "Step 2: Do decision tree tying with hmm1/MMF and hmm1/stats to produce hmm2/MMF and do re-estimation"
#     do decision tree based clustering
mkdir -p hmm10
set TREENAME = clustering_${ROVAL}_${TBVAL}.trees
set LISTNAME = clustering_${ROVAL}_${TBVAL}.mlist
set HEDNAME = clustering_${ROVAL}_${TBVAL}.hed
cat lib/edfiles/cluster_ROVAL_TBVAL.hed | sed "s=ROVAL=$ROVAL=g; s=TBVAL=$TBVAL=g; s=TREENAME=hmm10/$TREENAME=g; s=LISTNAME=hmm10/$LISTNAME=g" > hmm10/$HEDNAME
tools/htkbin/HHEd -A -D -V -T 1 -H hmm1/MMF -M hmm10 hmm10/$HEDNAME hmm0/hmms.mlist > hmm10/LOG
ln -s $PWD/hmm10/$LISTNAME ./hmms.mlist
#     do re-estimation for multiple iterations
cp lib/htefiles/HTE.xwtri HTE.herest
echo "set TRAINDATALIST = lib/flists/train.scp" >> HTE.herest          # training data file list
echo "set TRAINMLF = train.mlf" >> HTE.herest                          # training labels
echo "set HMMLIST = hmms.mlist" >> HTE.herest                          # HMM list in hmm0/MMF
echo "set HECONFIG = herest.cfg" >> HTE.herest                         # HERest config
echo "set BASICCONFIG = basic.cfg" >> HTE.herest                       # basic feature config 
echo "set HEBIN = tools/htkbin/HERest" >> HTE.herest                   # HERest binary file
tools/scripts/hbuild HTE.herest 11 14
#     reset variance floor
mkdir hmm14.0
echo "set HMMLIST = hmms.mlist" > hmm14.0/HTE.hhed
echo "set HHBIN = tools/htkbin/HHEd" >> hmm14.0/HTE.hhed
echo "LS hmm14/stats" > hmm14.0/varfloor.hed
echo "FA 0.1" >> hmm14.0/varfloor.hed
tools/scripts/hedit hmm14.0/HTE.hhed hmm14 hmm14.0 hmm14.0/varfloor.hed 
ln -s $PWD/hmm14/stats hmm14.0/stats



#if ($NMIX > 1) then
#    echo "Step 3: Increase the components in hmm?0 and re-estimate the model in hmm?1 ... hmm?4"
#    echo "set HMMLIST = hmms.mlist" > HTE.hhed
#    echo "set HHBIN = tools/htkbin/HHEd" >> HTE.hhed
#endif
#set lasthmm = hmm14
#set nmix = 2
#while ($nmix <= $NMIX)
#    # double the mixture number with HHEd
#    mkdir hmm${level}0
#    echo "LS $lasthmm/stats" > hmm${level}0/inc_mixtures.hed
#    echo "MU $nmix {*.state[2-4].mix}" >> hmm${level}0/inc_mixtures.hed
#    tools/scripts/hedit HTE.hhed ${lasthmm} hmm${level}0 hmm${level}0/inc_mixtures.hed
#
#    # re-estimate the model by 4 epochs
#    tools/scripts/hbuild HTE.herest ${level}1 ${level}4
#    set lasthmm = hmm${level}4
#    @ level = $level + 1
#    @ nmix = $nmix * 2
#end



# 1.3 (optionally) increase the component number in each Gaussian mixture
set stepidx = 2
set lasthmm = hmm14.0
set nmix = 2
while (1)
    # break the loop if it is a single Gaussian system
    if ($NMIX == 1) then
        break
    endif
    # current stage
    @ stepidx += 1
    echo "Step "${stepidx}": Increase the components of "${lasthmm}"/MMF and re-estimate the model in hmm"${nmix}"1 ... hmm"${nmix}"4"
    # increase the mixture number by no more than 2 with HHEd
    mkdir hmm${nmix}0
    echo "set HMMLIST = hmms.mlist" > hmm${nmix}0/HTE.hhed
    echo "set HHBIN = tools/htkbin/HHEd" >> hmm${nmix}0/HTE.hhed
    echo "LS ${lasthmm}/stats" > hmm${nmix}0/inc_mixtures.hed
    echo "MU $nmix {*.state[2-4].mix}" >> hmm${nmix}0/inc_mixtures.hed
    tools/scripts/hedit hmm${nmix}0/HTE.hhed ${lasthmm} hmm${nmix}0 hmm${nmix}0/inc_mixtures.hed
    # re-estimate the model by 4 epochs
    tools/scripts/hbuild HTE.herest ${nmix}1 ${nmix}4
    set lasthmm = hmm${nmix}4
    # break the loop
    if ($nmix == $NMIX) then
        break
    else
        # update the loop control variable
        @ nmix = $nmix + 2
        # incase $NMIX is odd
        if ($nmix > $NMIX) then
            set nmix = $NMIX
        endif
    endif
end

# output the results
echo "Training complete: The final triphone GMM-HMM set is in "${lasthmm}


